@page "/register"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<h1 class="h2 font-weight-normal login-title">
    ثبت نام کاربر جدید
</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerParameters">
    <DataAnnotationsValidator />
    <h4 class="font-weight-normal text-center">ایجاد اکانت</h4>

    <label for="inputUsername" class="sr-only">نام کاربری</label>
    <InputText id="inputUsername" class="form-control" placeholder="Username" autofocus @bind-Value="@registerParameters.UserName" />
    <ValidationMessage For="@(() => registerParameters.UserName)" />

    <label for="inputPassword" class="sr-only">رمز عبور</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="رمز" @bind-Value="@registerParameters.Password" />
    <ValidationMessage For="@(() => registerParameters.Password)" />

    <label for="inputPasswordConfirm" class="sr-only">تکرار رمز عبور</label>
    <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="تکرار رمز" @bind-Value="@registerParameters.PasswordConfirm" />
    <ValidationMessage For="@(() => registerParameters.PasswordConfirm)" />

    <button class="btn btn-lg btn-primary btn-block" type="submit">ایجاد اکانت</button>

    <label class="text-danger">@error</label>
    <NavLink href="/">
        <h6 class="font-weight-normal text-center">بازگشت به صفحه اول</h6>
    </NavLink>
</EditForm>

@functions{

    RegisterParameters registerParameters { get; set; } = new RegisterParameters();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Register(registerParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}